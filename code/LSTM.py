# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1olEBWrkExrH2fMJeVpgRbEPDJecgbFgm
"""

import math
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import keras
import tensorflow.keras.backend as K
import pandas.util.testing as tm

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from keras.models import Model
from keras.layers import Dense, Input
from keras.layers import LSTM
from keras.layers import Dropout

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/'My Drive'/'AITrainingProgramProjects'/'StockPredictionLSTMCNN'

"""# Load and Transform Data"""

df = pd.read_csv('dji_2009-2019.csv')
df.rename(columns={'Close':'Trade Close', 'Volume':'Trade Volume'}, inplace=True)
print('Number of rows and columns:', df.shape)
length = df.shape[0]
print(len)
df.head()

"""`close_log`: $\log\frac{\text{Price at t}}{\text{Price at (t-1)}}$ \\

`target_log`: $\log\frac{\text{Price at (t+33)}}{\text{Price at (t+28)}}$
"""

seq_length = 30
step_predict = 5

df['close_log'] = np.log(df['Trade Close'] / df['Trade Close'].shift(1))
df['vol_log'] = np.log(df['Trade Volume'] / df['Trade Volume'].shift(1))
df['target_log'] = np.log(df['Trade Close'].shift(-step_predict) / df['Trade Close'])

train_df = df[:int(len(df['Trade Close'])*0.6)].copy()
train_df.reset_index(inplace=True)
val_df = df[int(len(df['Trade Close'])*0.6):int(len(df['Trade Close'])*0.8)].copy()
val_df.reset_index(inplace=True)
test_df = df.loc[int(len(df['Trade Close'])*0.8):].copy()
test_df.reset_index(inplace=True)
train_df.shape, val_df.shape, test_df.shape

"""`sequence`: $\left[\log\frac{Price_t}{Price_{t-1}}, \log\frac{Price_{t+1}}{Price_{t}}, \dots,\log\frac{Price_{t+28}}{Price_{t+27}}\right]$"""

X_train = []
y_train = []
for i in range(seq_length, train_df.shape[0]-step_predict):
    X_train.append(train_df[i-seq_length+1: i][['close_log', 'vol_log']].values)
    y_train.append(train_df.loc[i-1, 'target_log'])
X_train, y_train= np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 2))
X_train.shape, y_train.shape

X_val = []
y_val = []
for i in range(seq_length, val_df.shape[0]-step_predict):
    X_val.append(val_df[i-seq_length+1: i][['close_log', 'vol_log']].values)
    y_val.append(val_df.loc[i-1, 'target_log'])
X_val, y_val= np.array(X_val), np.array(y_val)
X_val = np.reshape(X_val, (X_val.shape[0], X_val.shape[1], 2))
X_val.shape, y_val.shape

"""# Model"""

# initialize network (1 layer)

inputs = Input(shape=(X_train.shape[1], 2))
lstm1 = LSTM(units=50, return_sequences=False, recurrent_regularizer='l2')(inputs)
dropout1 = Dropout(rate=0.8)(lstm1)

# fully connected layers

fc1 = Dense(units=50)(dropout1)
dropoutfc1 = Dropout(rate=0.8)(fc1)
fc2 = Dense(units=25)(dropoutfc1)
dropoutfc2 = Dropout(rate=0.8)(fc2)
fc3 = Dense(units=10)(dropoutfc2)
dropoutfc3 = Dropout(rate=0.8)(fc3)
output = Dense(units=1)(dropoutfc3)

# fit lstm model

lstm_model = Model(inputs=inputs, outputs=output)
lstm_model.compile(optimizer = 'Adam', loss = 'mean_squared_error')
history = lstm_model.fit(X_train, y_train, epochs = 20, batch_size = 128, validation_data=(X_val, y_val))

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

"""# Predict and Plot

### Train set
"""

train_price = train_df[seq_length+step_predict:train_df.shape[0]]['Trade Close']
train_predicted = lstm_model.predict(X_train)
inv = train_df[seq_length:train_df.shape[0]-step_predict]['Trade Close'].values.reshape(-1, 1)
train_predicted = inv * np.exp(1)**train_predicted
len(train_price), len(train_predicted)

# visualising the results
date = train_df[seq_length+step_predict:train_df.shape[0]]['Date'].values
plt.figure(figsize=(20,10))
plt.plot(date, train_price, color = 'red', label = 'Real Dow Jones 2009-2019')
plt.plot(date, train_predicted, color = 'blue', label = 'Predicted Dow Jones 2009-2019')
plt.xticks(np.arange(0,len(train_predicted),100))
plt.title('TRAIN SET: Dow Jones 2009-2019 Stock Index Prediction')
plt.xlabel('Time')
plt.ylabel('Dow Jones 2009-2019 Stock Index')
plt.legend()
plt.show()
print(f'RMSE: {round(mean_squared_error(train_price, train_predicted, squared=False),4)}')
print(f'RMAE: {round(mean_absolute_error(train_price, train_predicted),4)}')

"""### Validation set"""

val_price = val_df[seq_length+step_predict:val_df.shape[0]]['Trade Close']
val_predicted = lstm_model.predict(X_val)
inv = val_df[seq_length:val_df.shape[0]-step_predict]['Trade Close'].values.reshape(-1, 1)
val_predicted = inv * np.exp(1)**val_predicted
len(val_price), len(val_predicted)

# visualising the results
date = val_df[seq_length+step_predict:val_df.shape[0]]['Date'].values
plt.figure(figsize=(20,10))
plt.plot(date, val_price, color = 'red', label = 'Real Dow Jones 2009-2019')
plt.plot(date, val_predicted, color = 'blue', label = 'Predicted Dow Jones 2009-2019')
plt.xticks(np.arange(0,len(val_predicted),50))
plt.title('VAL SET: Dow Jones 2009-2019 Stock Index Prediction')
plt.xlabel('Time')
plt.ylabel('Dow Jones 2009-2019 Stock Index')
plt.legend()
plt.show()
print(f'RMSE: {round(mean_squared_error(val_price, val_predicted, squared=False),4)}')
print(f'RMAE: {round(mean_absolute_error(val_price, val_predicted),4)}')

"""### Test set"""

X_test = []
y_test = []
for i in range(seq_length, test_df.shape[0]-step_predict):
    X_test.append(test_df[i-seq_length+1: i][['close_log', 'vol_log']].values)
    y_test.append(test_df.loc[i-1, 'target_log'])
X_test, y_test= np.array(X_test), np.array(y_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 2))
X_test.shape, y_test.shape

test_price = test_df[seq_length+step_predict:test_df.shape[0]]['Trade Close']
test_predicted = lstm_model.predict(X_test)
inv = test_df[seq_length:test_df.shape[0]-step_predict]['Trade Close'].values.reshape(-1, 1)
test_predicted = inv * np.exp(1)**test_predicted
len(test_price), len(test_predicted)

# visualising the results
date = test_df[seq_length+step_predict:test_df.shape[0]]['Date'].values
plt.figure(figsize=(20,10))
plt.plot(date, test_price, color = 'red', label = 'Real Dow Jones 2009-2019')
plt.plot(date, test_predicted, color = 'blue', label = 'Predicted Dow Jones 2009-2019')
plt.xticks(np.arange(0,len(test_predicted),50))
plt.title('TEST SET: Dow Jones 2009-2019 Stock Index Prediction')
plt.xlabel('Time')
plt.ylabel('Dow Jones 2009-2019 Stock Index')
plt.legend()
plt.show()
print(f'RMSE: {round(mean_squared_error(test_price, test_predicted, squared=False),4)}')
print(f'RMAE: {round(mean_absolute_error(test_price, test_predicted),4)}')